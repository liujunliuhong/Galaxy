
😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆😆
屏幕旋转
一、各个页面状态栏颜色、是否可以旋转的配置
1、先设置工程支持竖屏和横屏，即使当前工程从来没有出现过横屏；
2、工程的基础状态栏颜色根据实际情况来定；

二、分析
目前APP中最常见的情况是：APP大部分界面都是竖屏的，只有个别界面是横屏的

UITabbarViewController
UINavigationController
UIViewController

要具体控制单个界面的旋转，就需要从跟视图控制器开始

我个人倾向于这样一个APP层级结构

                -> navi -> loginVC
                |
navi -> rootVC ->
                |
                -> home

其中rootVC可以做很多事情，比如管理登录模块和home模块的切换；一些初始化方法，等等。。。


extension UINavigationController {
    open override var preferredStatusBarUpdateAnimation: UIStatusBarAnimation {
        if let childVC = self.topViewController?.children.last {
            return childVC.preferredStatusBarUpdateAnimation
        }
        return self.topViewController?.preferredStatusBarUpdateAnimation ?? .fade
    }

    open override var childForStatusBarHidden: UIViewController? {
        if let childVC = self.topViewController?.children.last {
            return childVC
        }
        return self.topViewController
    }



    open override var childForStatusBarStyle: UIViewController? {
        if let childVC = self.topViewController?.children.last {
            return childVC
        }
        return self.topViewController
    }

    open override var shouldAutorotate: Bool {
        if let childVC = self.topViewController?.children.last {
            return childVC.shouldAutorotate
        }
        return self.topViewController?.shouldAutorotate ?? false
    }

    open override var childForHomeIndicatorAutoHidden: UIViewController? {
        if let childVC = self.topViewController?.children.last {
            return childVC
        }
        return self.topViewController
    }

    open override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        if let childVC = self.topViewController?.children.last {
            return childVC.supportedInterfaceOrientations
        }
        return self.topViewController?.supportedInterfaceOrientations ?? .all
    }

    open override var preferredInterfaceOrientationForPresentation: UIInterfaceOrientation {
        if let childVC = self.topViewController?.children.last {
            return childVC.preferredInterfaceOrientationForPresentation
        }
        return self.topViewController?.preferredInterfaceOrientationForPresentation ?? .portrait
    }
}

extension UITabBarController {
    open override var preferredStatusBarUpdateAnimation: UIStatusBarAnimation {
        return self.selectedViewController?.preferredStatusBarUpdateAnimation ?? .none
    }

    open override var childForStatusBarStyle: UIViewController? {
        return self.selectedViewController?.childForStatusBarStyle
    }

    open override var childForHomeIndicatorAutoHidden: UIViewController?{
            return self.selectedViewController
    }

    open override var childForStatusBarHidden: UIViewController? {
        return self.selectedViewController?.childForStatusBarHidden
    }

    open override var shouldAutorotate: Bool{
        return self.selectedViewController?.shouldAutorotate ?? false
    }

    open override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        return .all
    }

    open override var preferredInterfaceOrientationForPresentation: UIInterfaceOrientation {
        return self.selectedViewController?.preferredInterfaceOrientationForPresentation ?? .portrait
    }
}

func YH_ForcedToRotation(_ rotation: UIInterfaceOrientation) {
    let unkown = NSNumber.init(value: UIInterfaceOrientation.unknown.rawValue)
    UIDevice.current.setValue(unkown, forKey: "orientation")
    let set = NSNumber.init(value: rotation.rawValue)
    UIDevice.current.setValue(set, forKey: "orientation")
}

1、设置info.plist 中 View controller-based status bar appearance 为 YES
2、TARGETS设置支持所有方向
3、TARGETS的Main Interface里面的Main去掉(很重要，否则会出现界面没旋转，但是状态栏旋转的情况)
4、接下来就可以根据页面结构设置旋转了
